---
import { OptimizeCloudinaryUrl } from "src/utils/cloudinary"
import type { Image } from "../types/property"
import Button from "@core/ui/Button.astro"

interface Props {
	images: Image[]
}

const { images = [] } = Astro.props
---

<section class="container mb-8">
	<div id="gallery-grid" class="rounded-xl overflow-hidden">
		<!-- Imagen principal -->
		<a
			href={OptimizeCloudinaryUrl(images[0].src, images[0].orientation, 1200)}
			class="gallery-main overflow-hidden"
			target="_blank"
			data-img={OptimizeCloudinaryUrl(images[0].src, images[0].orientation, 1200)}
			data-cropped="true"
		>
			<img
				src={OptimizeCloudinaryUrl(images[0].src, images[0].orientation, 800)}
				alt={images[0].alt}
				class="bg-gray-200 hover:scale-110 transition-transform duration-500"
				loading="lazy"
			/>
		</a>

		<!-- Miniaturas -->
		{
			images.slice(1).map((img, i) => {
				const thumb = OptimizeCloudinaryUrl(img.src, img.orientation, 400)
				const full = OptimizeCloudinaryUrl(img.src, img.orientation, 1200)

				return (
					<a
						href={full}
						class={`gallery-thumbnail relative ${["one", "two", "three", "four"][i]} ${i > 3 && "hidden"} overflow-hidden`}
						target="_blank"
						data-img={full}
						data-cropped="true"
					>
						{i < 4 && (
							<img
								src={thumb}
								alt={img.alt}
								class="bg-gray-200 hover:scale-110 transition-transform duration-500"
								loading="lazy"
							/>
						)}
					</a>
				)
			})
		}
	</div>

	<!-- BotÃ³n Ver todas -->
	<div class="relative flex w-fit mx-auto bg-white mt-4">
		<Button variant="secondary" id="open-gallery" size="sm" class="bg-gray-200">
			Ver todas las fotos ({images.length})
		</Button>
	</div>
</section>

<script>
	import PhotoSwipeLightbox from "photoswipe/lightbox"
	import "photoswipe/style.css"

	// -----------------------------
	// ðŸ”¹ Utils
	// -----------------------------
	const preloadAndSetImageSize = async (el: Element) => {
		const url = el.getAttribute("data-img")
		if (!url) return

		const img = new Image()
		img.src = url

		await new Promise((resolve) => (img.onload = resolve))

		el.setAttribute("data-pswp-width", img.naturalWidth.toString())
		el.setAttribute("data-pswp-height", img.naturalHeight.toString())
	}

	const prepareGalleryImages = async (elements: Element[]) => {
		for (const el of elements) {
			await preloadAndSetImageSize(el)
		}
	}

	// -----------------------------
	// ðŸ”¹ Setup anchors
	// -----------------------------
	const anchors = Array.from(document.querySelectorAll("#gallery-grid a[data-img]"))

	// -----------------------------
	// ðŸ”¹ Preload visible initially
	// -----------------------------
	prepareGalleryImages(anchors.slice(0, 5))

	// -----------------------------
	// ðŸ”¹ PhotoSwipe Config
	// -----------------------------
	const lightbox = new PhotoSwipeLightbox({
		gallery: "#gallery-grid",
		children: "a",
		thumbSelector: "a",
		pswpModule: () => import("photoswipe"),
		preload: [1, 2],
	})

	lightbox.on("afterInit", async () => {
		await prepareGalleryImages(anchors.slice(5))
	})

	lightbox.init()

	// -----------------------------
	// ðŸ”¹ Abrir galerÃ­a desde botÃ³n
	// -----------------------------
	document.getElementById("open-gallery")?.addEventListener("click", async (e) => {
		e.preventDefault()

		const firstAnchor = document.querySelector("#gallery-grid a")
		if (!(firstAnchor instanceof HTMLElement)) return

		firstAnchor.click()
	})
</script>

<style>
	#gallery-grid {
		position: relative;
		display: grid;
		grid-template-columns: 2fr 1fr 1fr;
		grid-template-rows: repeat(2, 1fr);
		gap: 8px;
	}

	#gallery-grid img {
		aspect-ratio: 1/1;
		object-fit: cover;
		height: 100%;
		width: 100%;
	}

	.gallery-main {
		grid-row: 1 / span 2;
	}

	@media (max-width: 600px) {
		#gallery-grid {
			grid-template-columns: 1fr 1fr 1fr;
			grid-template-rows: 1fr auto;
			height: auto;
		}

		.gallery-main {
			grid-column: 1 / span 3;
			grid-row: 1;
		}

		.gallery-thumbnail.four {
			display: none;
		}
	}
</style>
