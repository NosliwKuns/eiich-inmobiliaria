---
import { OptimizeCloudinaryUrl } from "src/utils/cloudinary"
import type { Image } from "../types/property"

interface Props {
	images: Image[]
}

const { images = [] } = Astro.props
---

<section class="container mb-8">
	<div id="gallery-grid" class="rounded-xl overflow-hidden">
		<!-- Imagen principal -->
		<a
			href={OptimizeCloudinaryUrl(images[0].src, images[0].orientation, 1200)}
			class="gallery-main"
			target="_blank"
			data-img={OptimizeCloudinaryUrl(images[0].src, images[0].orientation, 1200)}
			data-cropped="true"
		>
			<!-- <div
				class="h-full w-full bg-cover bg-center"
				style={`background-image: url(${OptimizeCloudinaryUrl(images[0].src, images[0].orientation, 800)});`}
			>
			</div> -->
			<img src={OptimizeCloudinaryUrl(images[0].src, images[0].orientation, 800)} alt={images[0].alt} />
		</a>

		<!-- Otras imágenes -->
		{
			images.slice(1, 5).map((img, i) => {
				const thumb = OptimizeCloudinaryUrl(img.src, img.orientation, 400)
				const full = OptimizeCloudinaryUrl(img.src, img.orientation, 1200)

				return (
					<a
						href={full}
						class={`gallery-thumbnail ${["one", "two", "three", "four"][i]}`}
						target="_blank"
						data-img={img.src}
						data-cropped="true"
					>
						<img src={thumb} alt={img.alt} />
					</a>
				)
			})
		}
	</div>
	<!-- Botón ver todas -->
	<div class="mt-4 flex justify-center">
		<button class="text-[#5193e6] hover:text-[#0c2647] cursor-pointer font-medium flex items-center">
			<i class="fas fa-images mr-2"></i>Ver todas las fotos ({images.length})
		</button>
	</div>
</section>

<!-- Script para PhotoSwipe y dimensiones -->
<script>
	import PhotoSwipeLightbox from "photoswipe/lightbox"
	import "photoswipe/style.css"

	const lightbox = new PhotoSwipeLightbox({
		gallery: "#gallery-grid",
		children: "a",
		pswpModule: () => import("photoswipe"),
	})
	lightbox.init()

	let active = false

	const gallery = document.querySelector("#gallery-grid")

	document.querySelectorAll("a[data-img]").forEach(async (el) => {
		const url = el.getAttribute("data-img")
		if (!url) return // Evita errores si falta el atributo

		const img = new Image()
		img.src = url

		await new Promise((res) => (img.onload = res))

		el.setAttribute("data-pswp-width", img.naturalWidth.toString())
		el.setAttribute("data-pswp-height", img.naturalHeight.toString())
	})
</script>

<style>
	#gallery-grid {
		display: grid;
		grid-template-columns: 50% 25% 25%;
		grid-template-rows: repeat(2, 1fr);
		gap: 8px;
	}

	#gallery-grid img {
		aspect-ratio: 1/1;
		object-fit: cover;
		height: 100%;
	}

	.gallery-main {
		grid-row: 1 / span 2;
	}

	@media (max-width: 1000px) {
		.gallery-grid {
			grid-template-columns: 60% 40%;
			grid-template-rows: repeat(2, 1fr);
		}

		.gallery-main {
			grid-row: 1 / span 2;
		}

		.gallery-thumbnail.three,
		.gallery-thumbnail.four {
			display: none;
		}
	}

	@media (max-width: 840px) {
		.gallery-grid {
			grid-template-columns: 70% 30%;
			grid-template-rows: repeat(3, 1fr);
		}

		.gallery-main {
			grid-row: 1 / span 3;
		}

		.gallery-thumbnail.three {
			display: block;
		}
	}

	@media (max-width: 600px) {
		.gallery-grid {
			grid-template-columns: 1fr 1fr 1fr;
			grid-template-rows: 300px 100px;
			height: auto;
		}

		.gallery-main {
			grid-column: 1 / span 3;
			grid-row: 1;
		}
	}
</style>
